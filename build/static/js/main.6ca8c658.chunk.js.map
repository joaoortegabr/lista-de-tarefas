{"version":3,"sources":["components/TaskForm.js","components/Task.js","components/TaskList.js","TaskManager.js","index.js"],"names":["TaskForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","alt","Task","tasks","completedTask","removeTask","updateTask","setEdit","map","task","index","onClick","isComplete","TaskList","setTasks","test","newTasks","updatedTasks","removeArr","filter","taskId","newValue","prev","item","TaskManager","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ca8c658.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport '../style.css'\r\nimport '../icondone.png'\r\nimport '../icondel.png'\r\nimport '../iconedit.png'\r\n\r\nfunction TaskForm(props) {\r\n\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 1000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <form className=\"task-form\" onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                <input type=\"text\" placeholder=\"Atualizar esta tarefa\" value={input} name=\"text\" className=\"task-input\" onChange={handleChange} ref={inputRef}/>\r\n                <button className=\"task-button edit\" onChange={handleChange} alt=\"Clique para atualizar esta tarefa\">O</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                <input type=\"text\" placeholder=\"Adicione uma tarefa\" value={input} name=\"text\" className=\"task-input\" onChange={handleChange} ref={inputRef}/>\r\n                <button className=\"task-button\" onChange={handleChange} alt=\"Clique para adicionar uma tarefa\">+</button>\r\n                </>\r\n            )}\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TaskForm","import React, { useState } from 'react'\r\nimport TaskForm from './TaskForm'\r\nimport '../style.css'\r\nimport '../icondone.png'\r\nimport '../icondel.png'\r\nimport '../iconedit.png'\r\n\r\n\r\nfunction Task({tasks, completedTask, removeTask, updateTask }) {\r\n\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTask(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n    \r\n    if (edit.id) {\r\n        return <TaskForm edit={edit} onSubmit={submitUpdate} />;\r\n\r\n    }\r\n\r\n    return tasks.map((task, index) => (\r\n        <div className=\"task-row\">\r\n            <div className=\"buttons\">\r\n                <button onClick={() => completedTask(task.id)} className='completed-icon' alt=\"Marcar como concluÃ­do\"></button>\r\n                <button onClick={() => removeTask(task.id)} className='delete-icon' alt=\"Remover tarefa\"></button>\r\n                <button onClick={() => setEdit({id: task.id, value: task.text})} className='edit-icon' alt=\"Modificar tarefa\"></button>\r\n            </div>\r\n            <div key={index} className={task.isComplete ? 'task completed' : 'task'}>\r\n            {task.text}\r\n            </div>  \r\n        </div>  \r\n    ))\r\n};\r\n\r\nexport default Task","import React, { useState } from 'react'\r\nimport Task from './Task'\r\nimport TaskForm from './TaskForm'\r\nimport '../style.css'\r\nimport '../icondone.png'\r\nimport '../icondel.png'\r\nimport '../iconedit.png'\r\n\r\n\r\nfunction TaskList() {\r\n\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const addTask = task => {\r\n        if(!task.text || /^\\s*$/.test(task.text)) {\r\n            return\r\n        }\r\n        const newTasks = [task, ...tasks];\r\n\r\n        setTasks(newTasks);\r\n\r\n    };\r\n\r\n    const updateTask = (taskId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return\r\n        }\r\n        \r\n        setTasks(prev => prev.map(item => (item.id === taskId ? newValue : item)));\r\n    };\r\n\r\n    const removeTask = id => {\r\n        const removeArr = [...tasks].filter(task => task.id !== id);\r\n\r\n        setTasks(removeArr)\r\n    };\r\n\r\n    const completedTask = id => {\r\n        let updatedTasks = tasks.map(task => {\r\n            if (task.id === id) {\r\n                task.isComplete = !task.isComplete\r\n            }\r\n            return task\r\n        })\r\n        setTasks(updatedTasks);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Lista de Tarefas</h1>\r\n            <TaskForm onSubmit={addTask}/>\r\n            <Task \r\n                completedTask={completedTask} \r\n                removeTask={removeTask}\r\n                updateTask={updateTask}\r\n                tasks={tasks} />\r\n\r\n            <div className=\"ad-block\">\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskList","import React from 'react';\nimport TaskList from './components/TaskList'\n\nfunction TaskManager() {\n    return (\n        <div className='task-app'>\n            <TaskList />\n        </div>\n    )\n}\n\nexport default TaskManager;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TaskManager from './TaskManager';\n\nReactDOM.render(\n  <TaskManager />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}